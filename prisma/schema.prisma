// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id @default(uuid())
  clerkUserId String        @unique
  email       String        @unique
  name        String?
  imageUrl    String?
  transaction Transaction[]
  accounts    Account[]
  budgets     Budget[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("users")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  balance      Decimal       @default(0)
  isDefault    Boolean       @default(false)
  userId       String //foreign Key
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  UpdatedAt    DateTime      @updatedAt

  @@index([userId])
  @@map("accounts")
}

enum AccountType {
  CURRENT
  SAVING
}

model Transaction {
  id                String             @id @default(uuid())
  type              TransactionType
  amount            Decimal
  description       String?
  date              DateTime
  category          String // income or expense
  receiptUrl        String?
  isRecurring       Boolean            @default(false)
  recurringInterval RecurringInterval? //only used if recurring is true
  nextRecurringDate DateTime
  lastProcessed     DateTime
  status            TransactionStatus  @default(COMPLETED)
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId         String
  account           Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

model Budget {
  id          String       @id @default(uuid())
  amount      Decimal
  lastAlertSent DateTime?  // Track when the last alert was sent
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@map("budgets")
}


enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

/*

--> uuid => universal unique identifiers.

The @@index directive in Prisma creates database indexes for specific fields to optimize query performance. Letâ€™s focus on the two indexes in the Transaction model:

@@index([userId]): Optimizes queries filtering by the userId field.
@@index([accountId]): Optimizes queries filtering by the accountId field.

How It Works
 -> @@index([userId])
 -> This creates an index on the userId column.
 -> When querying for all transactions by a specific user, the database uses the index to quickly locate matching rows.
 -> @@index([accountId])
 -> This creates an index on the accountId column.
 -> When querying for all transactions associated with a specific account, the index speeds up the process.

*/
